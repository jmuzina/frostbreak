---
import Icon from './Icon.astro';
import type {iconPaths} from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }= [
    {label: 'About', href: '/about'},
    {label: 'Resources', href: '/resources'},
    {label: 'Events', href: '/events'},
    {label: 'Apps', href: '/apps'}
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }= [
    {label: 'Discord', href: '#', icon: 'discord-logo'},
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
    let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
    if (pathname.at(0) !== '/') pathname = '/' + pathname;
    if (pathname.at(-1) !== '/') pathname += '/';
    return pathname === href || (href !== '/' && pathname.startsWith(href));
};
---

<nav>
    <div class="nav__header">
        <a href="/" class="nav__site-title">
            <img src="/assets/frostbreak-logo-64x64.png" width="32" height="32"
                 alt="The logo of Frostbreak. A crested shield that is split into four quadrants. From top-left ot bottom-right, the quadrants contain a blue dragon, a pride progress flag, a snowflake, and a fox. "/>
            Frostbreak
        </a>
        <menu-button>
            <template>
                <button class="nav__menu-button" aria-expanded="false">
                    <span class="sr-only">Menu</span>
                    <Icon icon="list"/>
                </button>
            </template>
        </menu-button>
    </div>
    <noscript>
        <ul class="nav__items">
            {
                textLinks.map(({label, href}) => (
                  <li class="nav__items-item">
                      <a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
                          {label}
                      </a>
                  </li>
                ))
            }
        </ul>
    </noscript>
    <noscript>
        <div class="nav__footer">
            <div class="nav__socials">
                {
                    iconLinks.map(({href, icon, label}) => (
                      <a href={href} class="nav__social">
                          <span class="sr-only">{label}</span>
                          <Icon icon={icon}/>
                      </a>
                    ))
                }
            </div>
        </div>
    </noscript>
    <div id="menu-content" hidden>
        <ul class="nav__items">
            {
                textLinks.map(({label, href}) => (
                  <li class="nav__items-item">
                      <a aria-current={isCurrentPage(href) ? 'page' : null} class="link" href={href}>
                          {label}
                      </a>
                  </li>
                ))
            }
        </ul>
        <div class="nav__footer">
            <div class="nav__socials">
                {
                    iconLinks.map(({href, icon, label}) => (
                      <a href={href} class="nav__social">
                          <span class="sr-only">{label}</span>
                          <Icon icon={icon}/>
                      </a>
                    ))
                }
            </div>
        </div>
    </div>
</nav>
<script>
    class MenuButton extends HTMLElement {
        constructor() {
            super();

            // Inject menu toggle button when JS runs.
            this.appendChild(this.querySelector('template')!.content.cloneNode(true));
            const btn = this.querySelector('button')!;

            // Hide menu (shown by default to support no-JS browsers).
            const menu = document.getElementById('menu-content')!;
            menu.hidden = true;
            // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
            menu.classList.add('menu-content');

            /** Set whether the menu is currently expanded or collapsed. */
            const setExpanded = (expand: boolean) => {
                btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
                menu.hidden = !expand;
            };

            // Toggle menu visibility when the menu button is clicked.
            btn.addEventListener('click', () => setExpanded(menu.hidden));

            // Hide menu button for large screens.
            const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
                setExpanded(e.matches);
                btn.hidden = e.matches;
            };
            const mediaQueries = window.matchMedia('(min-width: 50em)');
            handleViewports(mediaQueries);
            mediaQueries.addEventListener('change', handleViewports);
        }
    }

    customElements.define('menu-button', MenuButton);
</script>