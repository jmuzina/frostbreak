---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Frostbreak',
	description = 'A home for Buffalo\'s queer community.',
} = Astro.props;
---
<head title={title}>
<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Oxygen:wght@300;400;700&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
<!-- General favicon -->
<link rel="icon" href="/assets/favicons/favicon.ico" type="image/x-icon">
<link rel="icon" href="/assets/favicons/favicon-16x16.png" sizes="16x16">
<link rel="icon" href="/assets/favicons/favicon-32x32.png" sizes="32x32">

<!-- Apple Touch Icon -->
<link rel="apple-touch-icon" href="/assets/favicons/apple-touch-icon.png">

<!-- Android Chrome icons -->
<link rel="icon" href="/assets/favicons/android-chrome-192x192.png" sizes="192x192">
<link rel="icon" href="/assets/favicons/android-chrome-512x512.png" sizes="512x512">

<!-- Web Manifest -->
<link rel="manifest" href="/assets/favicons/site.webmanifest">

<meta name="theme-color" content="#ffffff">

<!--<script is:inline>-->
<!--	// This code is inlined in the head to make dark mode instant & blocking.-->
<!--	const getThemePreference = () => {-->
<!--		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {-->
<!--			return localStorage.getItem('theme');-->
<!--		}-->
<!--		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';-->
<!--	};-->
<!--	const isDark = getThemePreference() === 'dark';-->
<!--	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');-->

<!--	if (typeof localStorage !== 'undefined') {-->
<!--		// Watch the document element and persist user preference when it changes.-->
<!--		const observer = new MutationObserver(() => {-->
<!--			const isDark = document.documentElement.classList.contains('theme-dark');-->
<!--			localStorage.setItem('theme', isDark ? 'dark' : 'light');-->
<!--		});-->
<!--		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });-->
<!--	}-->
<!--</script>-->
</head>